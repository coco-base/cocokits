import fs from 'fs';
import path from 'path';

import { clearDir, sanitizeCSSVariableName, SCSS_VARIABLES_FOLDER_NAME } from './builder.util';
import { logEndParsing, logFileHasGenerated, logStartParsing } from './logger';
import { Logger } from '../../../utils/logger';
import { ScssifyTokenExecutorSchema } from '../schema';
import { CompilerResult, TransformedDesignTokenCollectionMap } from '../token.model';
import { recordForEach } from '../utils/record-for-each';
import { recordReduceDeepMerge } from '../utils/reduce-merge';

/**
 * Builds SCSS variables from the compiler result and save them.
 *
 * @param compilerResult The result from the CSS compiler.
 */
export function buildScssVariables(compilerResult: CompilerResult, options: ScssifyTokenExecutorSchema) {
  logStartParsing('SCSS-Variables');

  const scssVariablesDir = path.join(options.outputDir, SCSS_VARIABLES_FOLDER_NAME);
  clearDir(scssVariablesDir);

  const originalCollectionMap = getOriginalCollectionMap(compilerResult.transformedTokens);

  recordForEach(originalCollectionMap, (collectionNames, originalCollectionName) => {
    const variableNamesWithCollectionModeMap = getVariableNamesWithModesMap(
      collectionNames,
      compilerResult.transformedTokens
    );
    const scssVariablesContent = getScssVariablesContent(collectionNames, variableNamesWithCollectionModeMap);
    const content = getFileContent(scssVariablesContent);
    const filePath = writeContentToFile(content, originalCollectionName, scssVariablesDir);
    logFileHasGenerated(filePath);
  });

  const indexFilePath = generateIndexFile(originalCollectionMap, scssVariablesDir);
  logFileHasGenerated(indexFilePath);

  logEndParsing('SCSS-Variables');
}

function generateIndexFile(originalCollectionMap: Record<string, string[]>, scssVariablesDir: string) {
  let content = '';
  recordForEach(originalCollectionMap, (collectionNames, originalCollectionName) => {
    content += `@import './${originalCollectionName}';`;
  });

  const indexFilePath = path.join(scssVariablesDir, `index.scss`);
  fs.writeFileSync(indexFilePath, content);

  return indexFilePath;
}

function getFileContent(scssVariables: string) {
  return `
/**
 * Do not edit directly
 * Generated by coco-kits scssify-token executor on ${new Date()}
 */

${scssVariables}
`;
}

function getScssVariablesContent(
  collectionNames: string[],
  variableNamesWithModesMap: Map<string, Set<string>>
): string {
  let scssVariables = '';

  variableNamesWithModesMap.forEach((modesSet, cssVariableName) => {
    const tokenModes = Array.from(modesSet.values());
    const totalCollectionModes = collectionNames.length;

    if (tokenModes.length > 0 && tokenModes.length !== totalCollectionModes) {
      Logger.warning(
        `\n- WARNING: Skip scss variable: '${cssVariableName}' must be included in '${collectionNames.join(
          ', '
        )}' modes, but it's only included in '${tokenModes.join(',')}' mode.\n`
      );
      return;
    }

    scssVariables += `\n$${cssVariableName}: var(--${cssVariableName});`;
  });

  return scssVariables;
}

function getOriginalCollectionMap(transformedTokens: TransformedDesignTokenCollectionMap) {
  const originalCollectionMap = recordReduceDeepMerge(transformedTokens, (_, collectionName) => {
    const [collection] = collectionName.split('.');
    return { [collection]: [collectionName] };
  });

  return originalCollectionMap;
}

function getVariableNamesWithModesMap(
  collectionNames: string[],
  transformedTokens: TransformedDesignTokenCollectionMap
) {
  const variableNamesWithCollectionMode = new Map<string, Set<string>>();

  collectionNames.forEach((collectionName) => {
    const tokens = transformedTokens[collectionName];

    tokens.forEach((token) => {
      const tokenMode = collectionName.split('.')[1];
      const cssVariableName = sanitizeCSSVariableName(token.namePath);

      const modesSet = variableNamesWithCollectionMode.get(cssVariableName) ?? new Set();

      if (tokenMode) {
        modesSet.add(tokenMode);
      }

      variableNamesWithCollectionMode.set(cssVariableName, modesSet);
    });
  });

  return variableNamesWithCollectionMode;
}

function writeContentToFile(content: string, originalCollectionName: string, scssVariablesDir: string) {
  const filePath = path.join(scssVariablesDir, `_${originalCollectionName}.scss`);
  fs.mkdirSync(scssVariablesDir, { recursive: true });
  fs.writeFileSync(filePath, content);

  return filePath;
}
