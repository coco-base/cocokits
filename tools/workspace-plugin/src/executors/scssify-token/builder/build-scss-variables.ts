import fs from 'fs';
import path from 'path';

import { clearDir, sanitizeCSSVariableName, SCSS_VARIABLES_FOLDER_NAME } from './builder.util';
import { logEndParsing, logFileHasGenerated, logStartParsing } from './logger';
import { Logger } from '../../../utils/logger';
import { ScssifyTokenExecutorSchema } from '../schema';
import {
  CollectionName,
  CollectionWithModeName,
  CompilerResult,
  CSSVariableName,
  ModeName,
  TokenDefinitionMap,
  TransformedDesignTokenCollectionMap,
  CssVariableNamesWithModeMap,
} from '../token.model';
import { recordForEach } from '../utils/record-for-each';
import { recordReduceDeepMerge } from '../utils/reduce-merge';

/**
 * Builds SCSS variables from the compiler result and save them.
 *
 * @param compilerResult The result from the CSS compiler.
 */
export function buildScssVariables(compilerResult: CompilerResult, options: ScssifyTokenExecutorSchema) {
  logStartParsing('SCSS-Variables');

  const scssVariablesDir = path.join(options.outputDir, SCSS_VARIABLES_FOLDER_NAME);
  clearDir(scssVariablesDir);

  const collectionMap = getCollectionMap(compilerResult.transformedTokens);

  recordForEach(collectionMap, (collectionWithModeNames, collectionName) => {
    const variableNamesWithCollectionModeMap = getVariableNamesWithModesMap(
      collectionWithModeNames,
      compilerResult.transformedTokens
    );
    const scssVariablesContent = getScssVariablesContent(collectionWithModeNames, variableNamesWithCollectionModeMap);
    const content = getFileContent(scssVariablesContent);
    const filePath = writeContentToFile(content, collectionName, scssVariablesDir);
    logFileHasGenerated(filePath);
  });

  const indexFilePath = generateIndexFile(collectionMap, scssVariablesDir);
  logFileHasGenerated(indexFilePath);

  logEndParsing('SCSS-Variables');
}

function generateIndexFile(collectionMap: TokenDefinitionMap, scssVariablesDir: string) {
  let content = `
 /**
 * Do not edit directly
 * Generated by coco-kits scssify-token executor on ${new Date()}
 */
 
  `;
  recordForEach(collectionMap, (collectionWithModeNames, collectionName) => {
    content += `@import './${collectionName}';`;
  });

  const indexFilePath = path.join(scssVariablesDir, `index.scss`);
  fs.writeFileSync(indexFilePath, content);

  return indexFilePath;
}

function getFileContent(scssVariables: string) {
  return `
/**
 * Do not edit directly
 * Generated by coco-kits scssify-token executor on ${new Date()}
 */

${scssVariables}
`;
}

function getScssVariablesContent(
  collectionWithModeNames: CollectionWithModeName[],
  variableNamesWithCollectionModeMap: CssVariableNamesWithModeMap
): string {
  let scssVariables = '';

  variableNamesWithCollectionModeMap.forEach((modesNameSet, cssVariableName) => {
    const tokenModes = Array.from(modesNameSet.values());
    const totalCollectionModes = collectionWithModeNames.length;

    if (tokenModes.length > 0 && tokenModes.length !== totalCollectionModes) {
      Logger.warning(
        `\n- WARNING: Skip scss variable: '${cssVariableName}' must be included in '${collectionWithModeNames.join(
          ', '
        )}' modes, but it's only included in '${tokenModes.join(',')}' mode.\n`
      );
      return;
    }

    scssVariables += `\n$${cssVariableName}: var(--${cssVariableName});`;
  });

  return scssVariables;
}

function getCollectionMap(transformedTokens: TransformedDesignTokenCollectionMap): TokenDefinitionMap {
  const collectionMap = recordReduceDeepMerge(transformedTokens, (_, collectionWithModeName) => {
    const [collection] = collectionWithModeName.split('.');
    return { [collection]: [collectionWithModeName] };
  });

  return collectionMap;
}

function getVariableNamesWithModesMap(
  collectionWithModeNames: CollectionWithModeName[],
  transformedTokens: TransformedDesignTokenCollectionMap
): CssVariableNamesWithModeMap {
  const variableNamesWithModeMap = new Map<CSSVariableName, Set<ModeName>>();

  collectionWithModeNames.forEach((collectionWithModeName) => {
    const tokens = transformedTokens[collectionWithModeName];

    tokens.forEach((token) => {
      const modeName: ModeName = collectionWithModeName.split('.')[1];
      const cssVariableName: CSSVariableName = sanitizeCSSVariableName(token.namePath);

      const modesSet: Set<ModeName> = variableNamesWithModeMap.get(cssVariableName) ?? new Set();

      if (modeName) {
        modesSet.add(modeName);
      }

      variableNamesWithModeMap.set(cssVariableName, modesSet);
    });
  });

  return variableNamesWithModeMap;
}

function writeContentToFile(content: string, collectionName: CollectionName, scssVariablesDir: string) {
  const filePath = path.join(scssVariablesDir, `_${collectionName}.scss`);
  fs.mkdirSync(scssVariablesDir, { recursive: true });
  fs.writeFileSync(filePath, content);

  return filePath;
}
