import fs from 'fs';
import _ from 'lodash';
import path from 'path';

import { recordForEach, reduceDeepMerge } from '@cocokits/common-utils';

import { buildTsVariableMap, clearDir, sanitizeTsVariableName, TS_VARIABLES_FOLDER_NAME } from './builder.util';
import { logEndParsing, logFileHasGenerated, logStartParsing } from './logger';
import { ScssifyTokenExecutorSchema } from '../schema';
import { CollectionWithModeName, CompilerResult, TransformedDesignToken } from '../token.model';

/**
 * Builds SCSS variables from the compiler result and save them.
 *
 * @param compilerResult The result from the CSS compiler.
 */
export function buildTsVariables(compilerResult: CompilerResult, options: ScssifyTokenExecutorSchema) {
  logStartParsing('Ts-Variables');

  const tsVariablesDir = path.join(options.outputDir, TS_VARIABLES_FOLDER_NAME);
  clearDir(tsVariablesDir);

  recordForEach(compilerResult.transformedTokens, (tokens, collectionWithModeName) => {
    const tsVariablesContent = getTsVariablesContent(tokens);
    const content = getFileContent(tsVariablesContent, collectionWithModeName);
    const filePath = writeContentToFile(content, collectionWithModeName, tsVariablesDir);
    logFileHasGenerated(filePath);
  });

  const collectionWithModeList = Object.keys(compilerResult.transformedTokens);
  const indexFilePath = generateIndexFile(collectionWithModeList, tsVariablesDir);
  logFileHasGenerated(indexFilePath);

  logEndParsing('Ts-Variables');
}

function generateIndexFile(collectionWithModeList: string[], tsVariablesDir: string) {
  const contentHeader = `
/* eslint-disable max-lines */

 /**
 * Do not edit directly
 * Generated by cocokits scssify-token executor on ${new Date()}
 */
 
  `;

  const content = collectionWithModeList.reduce((revuesContent, collectionWithMode) => {
    return revuesContent + `export * from './${collectionWithMode}';\n`;
  }, contentHeader);

  const indexFilePath = path.join(tsVariablesDir, `index.ts`);
  fs.writeFileSync(indexFilePath, content);

  return indexFilePath;
}

function getFileContent(scssVariables: string, collectionWithModeName: string) {
  return `
/* eslint-disable max-lines */

/**
 * Do not edit directly
 * Generated by cocokits scssify-token executor on ${new Date()}
 */

export const ${_.camelCase(collectionWithModeName)} = ${scssVariables};
`;
}

function getTsVariablesContent(tokens: TransformedDesignToken[]): string {
  const tsVariablesMap = reduceDeepMerge(tokens, (token) => {
    const taNamePath = sanitizeTsVariableName(token.namePath);
    const currentTsVariableMap = buildTsVariableMap(taNamePath, token.value);
    return currentTsVariableMap;
  });
  return JSON.stringify(tsVariablesMap, null, 2);
}

function writeContentToFile(content: string, collectionWithModeName: CollectionWithModeName, tsVariablesDir: string) {
  const filePath = path.join(tsVariablesDir, `${collectionWithModeName}.ts`);
  fs.mkdirSync(tsVariablesDir, { recursive: true });
  fs.writeFileSync(filePath, content);

  return filePath;
}
