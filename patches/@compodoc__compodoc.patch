diff --git a/.idea/compodoc@1.1.25.iml b/.idea/compodoc@1.1.25.iml
new file mode 100644
index 0000000000000000000000000000000000000000..d6ebd4805981b8400db3e3291c74a743fef9a824
--- /dev/null
+++ b/.idea/compodoc@1.1.25.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000000000000000000000000000000000000..07115cdf15dd408d3affb9240e112578e04abf68
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000000000000000000000000000000000000..92f47cb8aae8cf117d3ed79f0e5370d31e312254
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/compodoc@1.1.25.iml" filepath="$PROJECT_DIR$/.idea/compodoc@1.1.25.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/dist/index-cli-Cw3VCFPa.js b/dist/index-cli-Cw3VCFPa.js
index 255d0775b5d64591e3335933871623d8ef4db9e6..70239c4a346d078099f09a476dcd5a4699f9a8bf 100644
--- a/dist/index-cli-Cw3VCFPa.js
+++ b/dist/index-cli-Cw3VCFPa.js
@@ -10,6 +10,7 @@ var i18next = require('i18next');
 var semver = require('semver');
 var JSON5 = require('json5');
 var htmlEntities = require('html-entities');
+var cheerio = require('cheerio');
 var uuid = require('uuid');
 var cosmiconfig = require('cosmiconfig');
 
@@ -37,22 +38,23 @@ var ___namespace = /*#__PURE__*/_interopNamespaceDefault(_);
 var ts__namespace = /*#__PURE__*/_interopNamespaceDefault(ts);
 var semver__namespace = /*#__PURE__*/_interopNamespaceDefault(semver);
 var JSON5__namespace = /*#__PURE__*/_interopNamespaceDefault(JSON5);
+var cheerio__namespace = /*#__PURE__*/_interopNamespaceDefault(cheerio);
 
 /******************************************************************************
-Copyright (c) Microsoft Corporation.
+ Copyright (c) Microsoft Corporation.
 
-Permission to use, copy, modify, and/or distribute this software for any
-purpose with or without fee is hereby granted.
+ Permission to use, copy, modify, and/or distribute this software for any
+ purpose with or without fee is hereby granted.
 
-THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-PERFORMANCE OF THIS SOFTWARE.
-***************************************************************************** */
-/* global Reflect, Promise, SuppressedError, Symbol */
+ THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
+ REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+ AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
+ INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+ LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+ OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+ PERFORMANCE OF THIS SOFTWARE.
+ ***************************************************************************** */
+/* global Reflect, Promise, SuppressedError, Symbol, Iterator */
 
 var extendStatics = function(d, b) {
     extendStatics = Object.setPrototypeOf ||
@@ -943,8 +945,8 @@ var JsdocParserUtil = /** @class */ (function () {
                                     JSDocNode.name.right) {
                                     text =
                                         JSDocNode.name.left.escapedText +
-                                            '.' +
-                                            JSDocNode.name.right.escapedText;
+                                        '.' +
+                                        JSDocNode.name.right.escapedText;
                                 }
                                 rawDescription += JSDocNode.text + '{@link ' + text + '}';
                             }
@@ -4656,8 +4658,8 @@ var JsdocCodeExampleHelper = /** @class */ (function () {
                         else {
                             tag.comment =
                                 "<pre class=\"line-numbers\"><code class=\"language-".concat(type, "\">") +
-                                    this.getHtmlEntities(this.cleanTag(jsdocTags[i].comment)) +
-                                    "</code></pre>";
+                                this.getHtmlEntities(this.cleanTag(jsdocTags[i].comment)) +
+                                "</code></pre>";
                         }
                         tags.push(tag);
                     }
@@ -6238,13 +6240,18 @@ var LinkTypeHelper = /** @class */ (function () {
         var angularDocPrefix = AngularVersionUtil$1.prefixOfficialDoc(Configuration$1.mainData.angularVersion);
         if (_result) {
             context.type = {
-                raw: name
+                raw: name,
+                indexKey: ''
             };
             if (_result.source === 'internal') {
                 if (_result.data.type === 'class') {
                     _result.data.type = 'classe';
                 }
                 context.type.href = '../' + _result.data.type + 's/' + _result.data.name + '.html';
+                if (context.indexKey !== '' && context.indexKey !== undefined) {
+                    context.type.href += '#' + context.indexKey;
+                    context.type.indexKey = context.indexKey;
+                }
                 if (_result.data.type === 'miscellaneous' ||
                     (_result.data.ctype && _result.data.ctype === 'miscellaneous')) {
                     var mainpage = '';
@@ -6261,8 +6268,13 @@ var LinkTypeHelper = /** @class */ (function () {
                         case 'variable':
                             mainpage = 'variables';
                     }
-                    context.type.href =
-                        '../' + _result.data.ctype + '/' + mainpage + '.html#' + _result.data.name;
+                    context.type.href = '../' + _result.data.ctype + '/' + mainpage + '.html';
+                    if (_result.data && _result.data.name) {
+                        context.type.href += '#' + _result.data.name;
+                    }
+                }
+                if (!context.type.indexKey) {
+                    context.type.indexKey = '';
                 }
                 context.type.target = '_self';
             }
@@ -6274,7 +6286,8 @@ var LinkTypeHelper = /** @class */ (function () {
         }
         else if (BasicTypeUtil$1.isKnownType(name)) {
             context.type = {
-                raw: name
+                raw: name,
+                indexKey: ''
             };
             context.type.target = '_blank';
             context.type.href = BasicTypeUtil$1.getTypeUrl(name);
@@ -6716,8 +6729,8 @@ var ShortURLHelper = /** @class */ (function () {
         if (firstIndexOfSlash !== -1 || lastIndexOfSlash !== -1) {
             newUrl =
                 newUrl.substr(0, firstIndexOfSlash + 1) +
-                    '...' +
-                    newUrl.substr(lastIndexOfSlash, newUrl.length);
+                '...' +
+                newUrl.substr(lastIndexOfSlash, newUrl.length);
         }
         return newUrl;
     };
@@ -6854,24 +6867,24 @@ var HtmlEngine = /** @class */ (function () {
             });
         }))
             .then(function () {
-            var pagePath = _this.determineTemplatePath(templatePath, 'page.hbs');
-            return FileEngine$1.get(pagePath).then(function (data) {
-                _this.cache.page = data;
-                _this.compiledPage = Handlebars$1.compile(_this.cache.page, {
-                    preventIndent: true,
-                    strict: true
+                var pagePath = _this.determineTemplatePath(templatePath, 'page.hbs');
+                return FileEngine$1.get(pagePath).then(function (data) {
+                    _this.cache.page = data;
+                    _this.compiledPage = Handlebars$1.compile(_this.cache.page, {
+                        preventIndent: true,
+                        strict: true
+                    });
                 });
-            });
-        })
+            })
             .then(function () {
-            var menuPath = _this.determineTemplatePath(templatePath, 'partials/menu.hbs');
-            return FileEngine$1.get(menuPath).then(function (menuTemplate) {
-                _this.precompiledMenu = Handlebars$1.compile(menuTemplate, {
-                    preventIndent: true,
-                    strict: true
+                var menuPath = _this.determineTemplatePath(templatePath, 'partials/menu.hbs');
+                return FileEngine$1.get(menuPath).then(function (menuTemplate) {
+                    _this.precompiledMenu = Handlebars$1.compile(menuTemplate, {
+                        preventIndent: true,
+                        strict: true
+                    });
                 });
             });
-        });
     };
     HtmlEngine.prototype.renderMenu = function (templatePath, data) {
         var menuPath = this.determineTemplatePath(templatePath, 'partials/menu.hbs');
@@ -6975,12 +6988,12 @@ var MarkdownEngine = /** @class */ (function () {
         return FileEngine$1.get(process.cwd() + path__namespace.sep + filepath + '.md')
             .catch(function (err) { return FileEngine$1.get(process.cwd() + path__namespace.sep + filepath).then(); })
             .then(function (data) {
-            var returnedData = {
-                markdown: _this.markedInstance(data),
-                rawData: data
-            };
-            return returnedData;
-        });
+                var returnedData = {
+                    markdown: _this.markedInstance(data),
+                    rawData: data
+                };
+                return returnedData;
+            });
     };
     MarkdownEngine.prototype.getTraditionalMarkdownSync = function (filepath) {
         return this.markedInstance(FileEngine$1.getSync(process.cwd() + path__namespace.sep + filepath));
@@ -7150,7 +7163,6 @@ var MAX_SIZE_FILE_CHEERIO_PARSING = 400000000;
 
 var Handlebars = require('handlebars');
 var lunr = require('lunr');
-var cheerio = require('cheerio');
 var SearchEngine = /** @class */ (function () {
     function SearchEngine() {
         this.searchDocuments = [];
@@ -7169,7 +7181,7 @@ var SearchEngine = /** @class */ (function () {
         if (this.amountOfMemory < MAX_SIZE_FILE_CHEERIO_PARSING) {
             var indexStartContent = page.rawData.indexOf('<!-- START CONTENT -->');
             var indexEndContent = page.rawData.indexOf('<!-- END CONTENT -->');
-            var $ = cheerio.load(page.rawData.substring(indexStartContent + 1, indexEndContent));
+            var $ = cheerio__namespace.load(page.rawData.substring(indexStartContent + 1, indexEndContent));
             text = $('.content').html();
             text = htmlEntities.decode(text);
             text = text.replace(/(<([^>]+)>)/gi, '');
@@ -7221,7 +7233,6 @@ var SearchEngine = /** @class */ (function () {
 }());
 var SearchEngine$1 = SearchEngine.getInstance();
 
-var $ = require('cheerio');
 var ComponentsTreeEngine = /** @class */ (function () {
     function ComponentsTreeEngine() {
         this.components = [];
@@ -7275,7 +7286,7 @@ var ComponentsTreeEngine = /** @class */ (function () {
         var _this = this;
         return new Promise(function (resolve, reject) {
             ___namespace.forEach(_this.componentsForTree, function (component) {
-                var $component = $(component.templateData);
+                var $component = cheerio__namespace(component.templateData);
                 ___namespace.forEach(_this.componentsForTree, function (componentToFind) {
                     if ($component.find(componentToFind.selector).length > 0) {
                         console.log(componentToFind.name + ' found in ' + component.name);
@@ -7541,91 +7552,91 @@ var ClassHelper = /** @class */ (function () {
         var stringifyArgs = [];
         stringifyArgs = args
             .map(function (arg) {
-            var _result = DependenciesEngine$1.find(arg.type);
-            if (_result) {
-                if (_result.source === 'internal') {
-                    var path = _result.data.type;
-                    if (_result.data.type === 'class') {
-                        path = 'classe';
+                var _result = DependenciesEngine$1.find(arg.type);
+                if (_result) {
+                    if (_result.source === 'internal') {
+                        var path = _result.data.type;
+                        if (_result.data.type === 'class') {
+                            path = 'classe';
+                        }
+                        return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"../").concat(path, "s/").concat(_result.data.name, ".html\">").concat(arg.type, "</a>");
+                    }
+                    else {
+                        var path = AngularVersionUtil$1.getApiLink(_result.data, Configuration$1.mainData.angularVersion);
+                        return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"").concat(path, "\" target=\"_blank\">").concat(arg.type, "</a>");
                     }
-                    return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"../").concat(path, "s/").concat(_result.data.name, ".html\">").concat(arg.type, "</a>");
                 }
-                else {
-                    var path = AngularVersionUtil$1.getApiLink(_result.data, Configuration$1.mainData.angularVersion);
-                    return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"").concat(path, "\" target=\"_blank\">").concat(arg.type, "</a>");
+                else if (arg.dotDotDotToken) {
+                    return "...".concat(arg.name, ": ").concat(arg.type);
                 }
-            }
-            else if (arg.dotDotDotToken) {
-                return "...".concat(arg.name, ": ").concat(arg.type);
-            }
-            else if (arg.function) {
-                return _this.handleFunction(arg);
-            }
-            else if (arg.expression && arg.name) {
-                return arg.expression.text + '.' + arg.name.text;
-            }
-            else if (arg.expression && arg.kind === tsMorph.SyntaxKind.NewExpression) {
-                return 'new ' + arg.expression.text + '()';
-            }
-            else if (arg.kind && arg.kind === tsMorph.SyntaxKind.StringLiteral) {
-                return "'" + arg.text + "'";
-            }
-            else if (arg.kind &&
-                arg.kind === tsMorph.SyntaxKind.ArrayLiteralExpression &&
-                arg.elements &&
-                arg.elements.length > 0) {
-                var i = 0, len = arg.elements.length, result = '[';
-                for (i; i < len; i++) {
-                    result += "'" + arg.elements[i].text + "'";
-                    if (i < len - 1) {
-                        result += ', ';
-                    }
+                else if (arg.function) {
+                    return _this.handleFunction(arg);
                 }
-                result += ']';
-                return result;
-            }
-            else if (arg.kind &&
-                arg.kind === tsMorph.SyntaxKind.ArrowFunction &&
-                arg.parameters &&
-                arg.parameters.length > 0) {
-                return StringifyArrowFunction(arg);
-            }
-            else if (arg.kind && arg.kind === tsMorph.SyntaxKind.ObjectLiteralExpression) {
-                return StringifyObjectLiteralExpression(arg);
-            }
-            else if (BasicTypeUtil$1.isKnownType(arg.type)) {
-                var path = BasicTypeUtil$1.getTypeUrl(arg.type);
-                return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"").concat(path, "\" target=\"_blank\">").concat(arg.type, "</a>");
-            }
-            else {
-                if (arg.type) {
-                    var finalStringifiedArgument = '';
-                    var separator = ':';
-                    if (arg.name) {
-                        finalStringifiedArgument += arg.name;
-                    }
-                    if (arg.kind === tsMorph.SyntaxKind.AsExpression &&
-                        arg.expression &&
-                        arg.expression.text) {
-                        finalStringifiedArgument += arg.expression.text;
-                        separator = ' as';
-                    }
-                    if (arg.optional) {
-                        finalStringifiedArgument += _this.getOptionalString(arg);
-                    }
-                    if (arg.type) {
-                        finalStringifiedArgument += separator + ' ' + _this.visitType(arg.type);
+                else if (arg.expression && arg.name) {
+                    return arg.expression.text + '.' + arg.name.text;
+                }
+                else if (arg.expression && arg.kind === tsMorph.SyntaxKind.NewExpression) {
+                    return 'new ' + arg.expression.text + '()';
+                }
+                else if (arg.kind && arg.kind === tsMorph.SyntaxKind.StringLiteral) {
+                    return "'" + arg.text + "'";
+                }
+                else if (arg.kind &&
+                    arg.kind === tsMorph.SyntaxKind.ArrayLiteralExpression &&
+                    arg.elements &&
+                    arg.elements.length > 0) {
+                    var i = 0, len = arg.elements.length, result = '[';
+                    for (i; i < len; i++) {
+                        result += "'" + arg.elements[i].text + "'";
+                        if (i < len - 1) {
+                            result += ', ';
+                        }
                     }
-                    return finalStringifiedArgument;
+                    result += ']';
+                    return result;
                 }
-                else if (arg.text) {
-                    return "".concat(arg.text);
+                else if (arg.kind &&
+                    arg.kind === tsMorph.SyntaxKind.ArrowFunction &&
+                    arg.parameters &&
+                    arg.parameters.length > 0) {
+                    return StringifyArrowFunction(arg);
+                }
+                else if (arg.kind && arg.kind === tsMorph.SyntaxKind.ObjectLiteralExpression) {
+                    return StringifyObjectLiteralExpression(arg);
+                }
+                else if (BasicTypeUtil$1.isKnownType(arg.type)) {
+                    var path = BasicTypeUtil$1.getTypeUrl(arg.type);
+                    return "".concat(arg.name).concat(_this.getOptionalString(arg), ": <a href=\"").concat(path, "\" target=\"_blank\">").concat(arg.type, "</a>");
                 }
                 else {
-                    return "".concat(arg.name).concat(_this.getOptionalString(arg));
+                    if (arg.type) {
+                        var finalStringifiedArgument = '';
+                        var separator = ':';
+                        if (arg.name) {
+                            finalStringifiedArgument += arg.name;
+                        }
+                        if (arg.kind === tsMorph.SyntaxKind.AsExpression &&
+                            arg.expression &&
+                            arg.expression.text) {
+                            finalStringifiedArgument += arg.expression.text;
+                            separator = ' as';
+                        }
+                        if (arg.optional) {
+                            finalStringifiedArgument += _this.getOptionalString(arg);
+                        }
+                        if (arg.type) {
+                            finalStringifiedArgument += separator + ' ' + _this.visitType(arg.type);
+                        }
+                        return finalStringifiedArgument;
+                    }
+                    else if (arg.text) {
+                        return "".concat(arg.text);
+                    }
+                    else {
+                        return "".concat(arg.name).concat(_this.getOptionalString(arg));
+                    }
                 }
-            }
-        })
+            })
             .join(', ');
         return stringifyArgs;
     };
@@ -7847,7 +7858,7 @@ var ClassHelper = /** @class */ (function () {
     ClassHelper.prototype.isModuleDecorator = function (decorator) {
         return decorator.expression.expression
             ? decorator.expression.expression.text === 'NgModule' ||
-                decorator.expression.expression.text === 'Module'
+            decorator.expression.expression.text === 'Module'
             : false;
     };
     /**
@@ -8229,6 +8240,19 @@ var ClassHelper = /** @class */ (function () {
         }
         return '';
     };
+    ClassHelper.prototype.visitTypeIndex = function (node) {
+        var _return = '';
+        if (!node) {
+            return _return;
+        }
+        if (node.type &&
+            node.type.kind === tsMorph.SyntaxKind.IndexedAccessType &&
+            node.type.indexType &&
+            node.type.indexType.literal) {
+            return this.visitTypeName(node.type.indexType.literal);
+        }
+        return _return;
+    };
     ClassHelper.prototype.visitType = function (node) {
         var e_5, _a;
         var _this = this;
@@ -8380,6 +8404,12 @@ var ClassHelper = /** @class */ (function () {
                     _return += ']';
                 }
             }
+            if (node.type &&
+                node.type.kind === tsMorph.SyntaxKind.IndexedAccessType &&
+                node.type.objectType &&
+                node.type.objectType.typeName) {
+                _return = this.visitTypeName(node.type.objectType.typeName);
+            }
         }
         else if (node.elementType) {
             _return = kindToType(node.elementType.kind) + kindToType(node.kind);
@@ -8549,6 +8579,7 @@ var ClassHelper = /** @class */ (function () {
             deprecated: false,
             deprecationMessage: '',
             type: this.visitType(property),
+            indexKey: this.visitTypeIndex(property),
             optional: typeof property.questionToken !== 'undefined',
             description: '',
             line: this.getPosition(property, sourceFile).line + 1
@@ -10599,7 +10630,7 @@ var AngularDependencies = /** @class */ (function (_super) {
                             if (nodeVariableDeclarations.length > 0) {
                                 if (nodeVariableDeclarations[0].name &&
                                     nodeVariableDeclarations[0].name.kind ===
-                                        tsMorph.SyntaxKind.ArrayBindingPattern) {
+                                    tsMorph.SyntaxKind.ArrayBindingPattern) {
                                     isDestructured = true;
                                 }
                             }
@@ -10790,8 +10821,8 @@ var AngularDependencies = /** @class */ (function (_super) {
                 deps[symbols]
                     .map(function (i) { return i.name; })
                     .forEach(function (d) {
-                    logger.debug('', "\t- ".concat(d));
-                });
+                        logger.debug('', "\t- ".concat(d));
+                    });
             }
         });
     };
@@ -11093,8 +11124,8 @@ var AngularDependencies = /** @class */ (function (_super) {
             if (method.modifiers.length > 0) {
                 var kinds = method.modifiers
                     .map(function (modifier) {
-                    return modifier.kind;
-                })
+                        return modifier.kind;
+                    })
                     .reverse();
                 if (___namespace.indexOf(kinds, tsMorph.SyntaxKind.PublicKeyword) !== -1 &&
                     ___namespace.indexOf(kinds, tsMorph.SyntaxKind.StaticKeyword) !== -1) {
@@ -11320,14 +11351,14 @@ function promiseSequential(promises) {
         var iterateeFunc = function (previousPromise, currentPromise) {
             return previousPromise
                 .then(function (result) {
-                if (count++ !== 0) {
-                    results = results.concat(result);
-                }
-                return currentPromise(result, results, count);
-            })
+                    if (count++ !== 0) {
+                        results = results.concat(result);
+                    }
+                    return currentPromise(result, results, count);
+                })
                 .catch(function (err) {
-                return reject(err);
-            });
+                    return reject(err);
+                });
         };
         promises = promises.concat(function () { return Promise.resolve(); });
         promises.reduce(iterateeFunc, Promise.resolve(false)).then(function (res) {
@@ -11713,12 +11744,12 @@ var Application = /** @class */ (function () {
         });
         promiseSequential(actions)
             .then(function (res) {
-            _this.processPages();
-            _this.clearUpdatedFiles();
-        })
+                _this.processPages();
+                _this.clearUpdatedFiles();
+            })
             .catch(function (errorMessage) {
-            logger.error(errorMessage);
-        });
+                logger.error(errorMessage);
+            });
     };
     /**
      * Get dependency data for small group of updated files during watch process
@@ -11755,12 +11786,12 @@ var Application = /** @class */ (function () {
         }
         promiseSequential(actions)
             .then(function (res) {
-            _this.processPages();
-            _this.clearUpdatedFiles();
-        })
+                _this.processPages();
+                _this.clearUpdatedFiles();
+            })
             .catch(function (errorMessage) {
-            logger.error(errorMessage);
-        });
+                logger.error(errorMessage);
+            });
     };
     Application.prototype.detectAngularJSProjects = function () {
         if (typeof this.packageJsonData.dependencies !== 'undefined') {
@@ -11852,35 +11883,35 @@ var Application = /** @class */ (function () {
         }
         promiseSequential(actions)
             .then(function (res) {
-            if (Configuration$1.mainData.exportFormat !== COMPODOC_DEFAULTS.exportFormat) {
-                if (COMPODOC_DEFAULTS.exportFormatsSupported.indexOf(Configuration$1.mainData.exportFormat) > -1) {
-                    logger.info("Generating documentation in export format ".concat(Configuration$1.mainData.exportFormat));
-                    ExportEngine$1.export(Configuration$1.mainData.output, Configuration$1.mainData).then(function () {
-                        generationPromiseResolve(true);
-                        _this.endCallback();
-                        logger.info('Documentation generated in ' +
-                            Configuration$1.mainData.output +
-                            ' in ' +
-                            _this.getElapsedTime() +
-                            ' seconds');
-                        if (Configuration$1.mainData.serve) {
-                            logger.info("Serving documentation from ".concat(Configuration$1.mainData.output, " at http://").concat(Configuration$1.mainData.hostname, ":").concat(Configuration$1.mainData.port));
-                            _this.runWebServer(Configuration$1.mainData.output);
-                        }
-                    });
+                if (Configuration$1.mainData.exportFormat !== COMPODOC_DEFAULTS.exportFormat) {
+                    if (COMPODOC_DEFAULTS.exportFormatsSupported.indexOf(Configuration$1.mainData.exportFormat) > -1) {
+                        logger.info("Generating documentation in export format ".concat(Configuration$1.mainData.exportFormat));
+                        ExportEngine$1.export(Configuration$1.mainData.output, Configuration$1.mainData).then(function () {
+                            generationPromiseResolve(true);
+                            _this.endCallback();
+                            logger.info('Documentation generated in ' +
+                                Configuration$1.mainData.output +
+                                ' in ' +
+                                _this.getElapsedTime() +
+                                ' seconds');
+                            if (Configuration$1.mainData.serve) {
+                                logger.info("Serving documentation from ".concat(Configuration$1.mainData.output, " at http://").concat(Configuration$1.mainData.hostname, ":").concat(Configuration$1.mainData.port));
+                                _this.runWebServer(Configuration$1.mainData.output);
+                            }
+                        });
+                    }
+                    else {
+                        logger.warn("Exported format not supported");
+                    }
                 }
                 else {
-                    logger.warn("Exported format not supported");
+                    _this.processGraphs();
+                    _this.clearUpdatedFiles();
                 }
-            }
-            else {
-                _this.processGraphs();
-                _this.clearUpdatedFiles();
-            }
-        })
+            })
             .catch(function (errorMessage) {
-            logger.error(errorMessage);
-        });
+                logger.error(errorMessage);
+            });
     };
     Application.prototype.printStatistics = function () {
         logger.info('-------------------');
@@ -12012,35 +12043,35 @@ var Application = /** @class */ (function () {
         }
         promiseSequential(actions)
             .then(function (res) {
-            if (Configuration$1.mainData.exportFormat !== COMPODOC_DEFAULTS.exportFormat) {
-                if (COMPODOC_DEFAULTS.exportFormatsSupported.indexOf(Configuration$1.mainData.exportFormat) > -1) {
-                    logger.info("Generating documentation in export format ".concat(Configuration$1.mainData.exportFormat));
-                    ExportEngine$1.export(Configuration$1.mainData.output, Configuration$1.mainData).then(function () {
-                        generationPromiseResolve(true);
-                        _this.endCallback();
-                        logger.info('Documentation generated in ' +
-                            Configuration$1.mainData.output +
-                            ' in ' +
-                            _this.getElapsedTime() +
-                            ' seconds');
-                        if (Configuration$1.mainData.serve) {
-                            logger.info("Serving documentation from ".concat(Configuration$1.mainData.output, " at http://").concat(Configuration$1.mainData.hostname, ":").concat(Configuration$1.mainData.port));
-                            _this.runWebServer(Configuration$1.mainData.output);
-                        }
-                    });
+                if (Configuration$1.mainData.exportFormat !== COMPODOC_DEFAULTS.exportFormat) {
+                    if (COMPODOC_DEFAULTS.exportFormatsSupported.indexOf(Configuration$1.mainData.exportFormat) > -1) {
+                        logger.info("Generating documentation in export format ".concat(Configuration$1.mainData.exportFormat));
+                        ExportEngine$1.export(Configuration$1.mainData.output, Configuration$1.mainData).then(function () {
+                            generationPromiseResolve(true);
+                            _this.endCallback();
+                            logger.info('Documentation generated in ' +
+                                Configuration$1.mainData.output +
+                                ' in ' +
+                                _this.getElapsedTime() +
+                                ' seconds');
+                            if (Configuration$1.mainData.serve) {
+                                logger.info("Serving documentation from ".concat(Configuration$1.mainData.output, " at http://").concat(Configuration$1.mainData.hostname, ":").concat(Configuration$1.mainData.port));
+                                _this.runWebServer(Configuration$1.mainData.output);
+                            }
+                        });
+                    }
+                    else {
+                        logger.warn("Exported format not supported");
+                    }
                 }
                 else {
-                    logger.warn("Exported format not supported");
+                    _this.processGraphs();
                 }
-            }
-            else {
-                _this.processGraphs();
-            }
-        })
+            })
             .catch(function (errorMessage) {
-            logger.error(errorMessage);
-            process.exit(1);
-        });
+                logger.error(errorMessage);
+                process.exit(1);
+            });
     };
     Application.prototype.getIncludedPathForFile = function (file) {
         return path__namespace.join(Configuration$1.mainData.includes, file);
@@ -12094,7 +12125,7 @@ var Application = /** @class */ (function () {
                                 }
                                 finalPath_1 +=
                                     '/' +
-                                        cleanNameWithoutSpaceAndToLowerCase(elementTree.title);
+                                    cleanNameWithoutSpaceAndToLowerCase(elementTree.title);
                                 lastElementRootTree_1 = elementTree;
                             });
                             finalPath_1 = finalPath_1.replace('/' + url, '');
@@ -12233,13 +12264,13 @@ var Application = /** @class */ (function () {
                 });
                 ngModule.providers = ngModule.providers.filter(function (provider) {
                     return (DependenciesEngine$1.getInjectables().some(function (injectable) {
-                        var selectedInjectable = injectable.name === provider.name;
-                        if (selectedInjectable &&
-                            !ngModule.compodocLinks.injectables.includes(injectable)) {
-                            ngModule.compodocLinks.injectables.push(injectable);
-                        }
-                        return selectedInjectable;
-                    }) ||
+                            var selectedInjectable = injectable.name === provider.name;
+                            if (selectedInjectable &&
+                                !ngModule.compodocLinks.injectables.includes(injectable)) {
+                                ngModule.compodocLinks.injectables.push(injectable);
+                            }
+                            return selectedInjectable;
+                        }) ||
                         DependenciesEngine$1.getInterceptors().some(function (interceptor) { return interceptor.name === provider.name; }));
                 });
                 // Try fixing type undefined for each providers
@@ -13416,34 +13447,34 @@ var Application = /** @class */ (function () {
         logger.info('Process pages');
         Promise.all(pages.map(function (page) { return _this.processPage(page); }))
             .then(function () {
-            var callbacksAfterGenerateSearchIndexJson = function () {
-                if (Configuration$1.mainData.additionalPages.length > 0) {
-                    _this.processAdditionalPages();
-                }
-                else {
-                    if (Configuration$1.mainData.assetsFolder !== '') {
-                        _this.processAssetsFolder();
+                var callbacksAfterGenerateSearchIndexJson = function () {
+                    if (Configuration$1.mainData.additionalPages.length > 0) {
+                        _this.processAdditionalPages();
                     }
-                    _this.processResources();
+                    else {
+                        if (Configuration$1.mainData.assetsFolder !== '') {
+                            _this.processAssetsFolder();
+                        }
+                        _this.processResources();
+                    }
+                };
+                if (!Configuration$1.mainData.disableSearch) {
+                    SearchEngine$1.generateSearchIndexJson(Configuration$1.mainData.output).then(function () {
+                        callbacksAfterGenerateSearchIndexJson();
+                    }, function (e) {
+                        logger.error(e);
+                    });
                 }
-            };
-            if (!Configuration$1.mainData.disableSearch) {
-                SearchEngine$1.generateSearchIndexJson(Configuration$1.mainData.output).then(function () {
+                else {
                     callbacksAfterGenerateSearchIndexJson();
-                }, function (e) {
-                    logger.error(e);
-                });
-            }
-            else {
-                callbacksAfterGenerateSearchIndexJson();
-            }
-        })
+                }
+            })
             .then(function () {
-            return _this.processMenu(Configuration$1.mainData);
-        })
+                return _this.processMenu(Configuration$1.mainData);
+            })
             .catch(function (e) {
-            logger.error(e);
-        });
+                logger.error(e);
+            });
     };
     Application.prototype.transpileMenuWCToES5 = function (es6Code) {
         return babel.transformAsync(es6Code, {
@@ -13482,37 +13513,37 @@ var Application = /** @class */ (function () {
             var finalPathES5 = "".concat(output, "/js/menu-wc_es5.js");
             HtmlEngine$1.renderMenu(Configuration$1.mainData.templates, mainData)
                 .then(function (htmlData) {
-                FileEngine$1.write(finalPathES6, htmlData)
-                    .then(function () {
-                    _this.transpileMenuWCToES5(htmlData)
-                        .then(function (es5Data) {
-                        FileEngine$1.write(finalPathES5, es5Data.code)
-                            .then(function () {
-                            resolveProcessMenu();
+                    FileEngine$1.write(finalPathES6, htmlData)
+                        .then(function () {
+                            _this.transpileMenuWCToES5(htmlData)
+                                .then(function (es5Data) {
+                                    FileEngine$1.write(finalPathES5, es5Data.code)
+                                        .then(function () {
+                                            resolveProcessMenu();
+                                        })
+                                        .catch(function (err) {
+                                            logger.error('Error during ' + finalPathES5 + ' page generation');
+                                            logger.error(err);
+                                            return rejectProcessMenu('');
+                                        });
+                                })
+                                .catch(function (err) {
+                                    logger.error('Error during ' + finalPathES5 + ' page generation');
+                                    logger.error(err);
+                                    return rejectProcessMenu('');
+                                });
                         })
-                            .catch(function (err) {
-                            logger.error('Error during ' + finalPathES5 + ' page generation');
+                        .catch(function (err) {
+                            logger.error('Error during ' + finalPathES6 + ' page generation');
                             logger.error(err);
                             return rejectProcessMenu('');
                         });
-                    })
-                        .catch(function (err) {
-                        logger.error('Error during ' + finalPathES5 + ' page generation');
-                        logger.error(err);
-                        return rejectProcessMenu('');
-                    });
                 })
-                    .catch(function (err) {
+                .catch(function (err) {
                     logger.error('Error during ' + finalPathES6 + ' page generation');
                     logger.error(err);
                     return rejectProcessMenu('');
                 });
-            })
-                .catch(function (err) {
-                logger.error('Error during ' + finalPathES6 + ' page generation');
-                logger.error(err);
-                return rejectProcessMenu('');
-            });
         });
     };
     Application.prototype.processAdditionalPages = function () {
@@ -13530,17 +13561,17 @@ var Application = /** @class */ (function () {
             }
         }))
             .then(function () {
-            SearchEngine$1.generateSearchIndexJson(Configuration$1.mainData.output).then(function () {
-                if (Configuration$1.mainData.assetsFolder !== '') {
-                    _this.processAssetsFolder();
-                }
-                _this.processResources();
-            });
-        })
+                SearchEngine$1.generateSearchIndexJson(Configuration$1.mainData.output).then(function () {
+                    if (Configuration$1.mainData.assetsFolder !== '') {
+                        _this.processAssetsFolder();
+                    }
+                    _this.processResources();
+                });
+            })
             .catch(function (e) {
-            logger.error(e);
-            return Promise.reject(e);
-        });
+                logger.error(e);
+                return Promise.reject(e);
+            });
     };
     Application.prototype.processAssetsFolder = function () {
         logger.info('Copy assets folder');
@@ -13811,32 +13842,32 @@ var Application = /** @class */ (function () {
                 watcherReady = true;
                 watcher
                     .on('add', function (file) {
-                    logger.debug("File ".concat(file, " has been added"));
-                    // Test extension, if ts
-                    // rescan everything
-                    if (path__namespace.extname(file) === '.ts') {
-                        waiterAddAndRemove();
-                    }
-                })
+                        logger.debug("File ".concat(file, " has been added"));
+                        // Test extension, if ts
+                        // rescan everything
+                        if (path__namespace.extname(file) === '.ts') {
+                            waiterAddAndRemove();
+                        }
+                    })
                     .on('change', function (file) {
-                    logger.debug("File ".concat(file, " has been changed"));
-                    // Test extension, if ts
-                    // rescan only file
-                    if (path__namespace.extname(file) === '.ts' ||
-                        path__namespace.extname(file) === '.md' ||
-                        path__namespace.extname(file) === '.json') {
-                        _this.watchChangedFiles.push(path__namespace.join(cwd$1 + path__namespace.sep + file));
-                        waiterChange();
-                    }
-                })
+                        logger.debug("File ".concat(file, " has been changed"));
+                        // Test extension, if ts
+                        // rescan only file
+                        if (path__namespace.extname(file) === '.ts' ||
+                            path__namespace.extname(file) === '.md' ||
+                            path__namespace.extname(file) === '.json') {
+                            _this.watchChangedFiles.push(path__namespace.join(cwd$1 + path__namespace.sep + file));
+                            waiterChange();
+                        }
+                    })
                     .on('unlink', function (file) {
-                    logger.debug("File ".concat(file, " has been removed"));
-                    // Test extension, if ts
-                    // rescan everything
-                    if (path__namespace.extname(file) === '.ts') {
-                        waiterAddAndRemove();
-                    }
-                });
+                        logger.debug("File ".concat(file, " has been removed"));
+                        // Test extension, if ts
+                        // rescan everything
+                        if (path__namespace.extname(file) === '.ts') {
+                            waiterAddAndRemove();
+                        }
+                    });
             }
         });
     };
@@ -14463,4 +14494,4 @@ var CliApplication = /** @class */ (function (_super) {
 
 exports.Application = Application;
 exports.CliApplication = CliApplication;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
diff --git a/dist/index-cli.js b/dist/index-cli.js
index 1b476aa9172afe06b55563886f714c7132f97df9..c5e49fcae30d0cd04baa4081b3f14f5bf2e4d4fe 100644
--- a/dist/index-cli.js
+++ b/dist/index-cli.js
@@ -12,9 +12,10 @@ require('i18next');
 require('semver');
 require('json5');
 require('html-entities');
+require('cheerio');
 require('uuid');
 
 
 
 exports.CliApplication = indexCli.CliApplication;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtY2xpLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtY2xpLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
diff --git a/dist/index.js b/dist/index.js
index a0c1be07c46fe1fbcd9f383e4d6bd043d1f59d41..27a08dd27e7225d0bf27a08c63b5edfdfb94c196 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -11,6 +11,7 @@ require('i18next');
 require('semver');
 require('json5');
 require('html-entities');
+require('cheerio');
 require('uuid');
 require('cosmiconfig');
 
@@ -18,4 +19,4 @@ require('cosmiconfig');
 
 exports.Application = indexCli.Application;
 exports.CliApplication = indexCli.CliApplication;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
