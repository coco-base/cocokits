// (Do not edit directly)
// (Auto generated by the Cocokits 'generate-example-story-source' on Fri Feb 07 2025

import { AddonParametersSource, ThemeId } from '@cocokits/storybook-addon-theme';

export const SOURCE: AddonParametersSource[] = [
  {
    language: 'html',
    filename: 'volume-button.component.html',
    code: `
<button cck-icon-button size="sm" (click)="decreaseVolume()">
  <cck-svg-icon [icon]="Icons.minus"></cck-svg-icon>
</button>

{{cckExampleArgs().name}}

<cck-svg-icon
  [size]="cckExampleArgs().volumeIconSize"
  [color]="cckExampleArgs().volumeIconColor"
  [icon]="volumeIcon()"></cck-svg-icon>
<span class="volume-label">{{ volume() }}</span>

<button cck-icon-button size="sm" (click)="increaseVolume()">
  <cck-svg-icon [icon]="Icons.plus"></cck-svg-icon>
</button>
`,
  },
  {
    language: 'scss',
    filename: 'volume-button.component.scss',
    code: `
:host {
  display: flex;
  align-items: center;
  gap: var(--volume-host-gap);
}

.volume-label {
  font: var(--volume-text-font);
  color: var(--volume-text-color);
}
`,
  },
  {
    language: 'angular-ts',
    filename: 'volume-button.component.ts',
    code: `
import { Component, computed, input, signal } from '@angular/core';

import { IconButtonComponent, SvgIconComponent } from '@cocokits/angular-components';
import { Icons } from '@cocokits/common-icons';


const MAX_VOLUME = 4;
const MIN_VOLUME = 0;

@Component({
  standalone: true,
  selector: 'cck-volume-button',
  imports: [IconButtonComponent, SvgIconComponent],
  templateUrl: './volume-button.component.html',
  styleUrls: ['./volume-button.component.scss'],
})
export class VolumeButtonComponent {

  protected volume = signal(3);

  protected volumeIcon = computed(() => {
    switch (this.volume()) {
      case 0:
        return Icons.volumeMute;
      case 1:
        return Icons.volumeOff;
      case 2:
        return Icons.volumeLow;
      case 3:
        return Icons.volume;
      case 4:
        return Icons.volumeHigh;
      default:
        return Icons.volumeHigh;
    }
  });
  protected readonly Icons = Icons;

  increaseVolume() {
    this.volume.set(Math.max(MIN_VOLUME, Math.min(MAX_VOLUME, this.volume() + 1)));
  }

  decreaseVolume() {
    this.volume.set(Math.max(MIN_VOLUME, Math.min(MAX_VOLUME, this.volume() - 1)));
  }
}
`,
  },
  {
    language: 'scss',
    filename: 'global.scss',
    code: `
      :root {
        --volume-host-gap: 4px;
        --volume-text-font: var(--display-xs-medium);
        --volume-text-color: var(--color-font-default);
      }`,
    visibleConditions: [(theme) => theme.id === ThemeId.CocoKits],
  },
  {
    language: 'scss',
    filename: 'global.scss',
    code: `
      :root {
        --volume-host-gap: 0px;
        --volume-text-font: var(--text-xs-font-medium);
        --volume-text-color: var(--text-dark-primary);
      }`,
    visibleConditions: [(theme) => theme.id === ThemeId.FramesX],
  },
];
