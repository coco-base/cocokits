// (Do not edit directly)
// (Auto generated by the Cocokits 'generate-example-story-source' on Sat Mar 01 2025

import { AddonParametersSource, ThemeId } from '@cocokits/storybook-addon-theme';

export const SOURCE: AddonParametersSource[] = [
  {
    language: 'angular-ts',
    filename: 'trailing-select-amount.component.ts',
    code: `
import { Component, input, signal } from '@angular/core';

import {
  FormFieldComponent,
  InputComponent,
  LabelComponent,
  OptionComponent,
  SelectComponent,
  TrailingComponent,
} from '@cocokits/angular-components';


import { formatValue, unFormatValue } from './trailing-select-amount.util';

@Component({
  standalone: true,
  selector: 'cck-trailing-select-amount',
  imports: [FormFieldComponent, InputComponent, TrailingComponent, LabelComponent, SelectComponent, OptionComponent],
  template: \`
    <cck-form-field>
      <cck-label>Select amount</cck-label>
      <input cck-input (change)="onChange($event)" (focus)="onFocus()" (blur)="onBlur()" [value]="value()" />
      <cck-trailing>
        <cck-select value="USD">
          <cck-option value="USD">USD</cck-option>
          <cck-option value="EUR">EUR</cck-option>
          <cck-option value="JPY">JPY</cck-option>
          <cck-option value="CNY">CNY</cck-option>
          <cck-option value="KRW">KRW</cck-option>
        </cck-select>
      </cck-trailing>
    </cck-form-field>
  \`,
  styles: \`\`,
})
export class TrailingSelectAmountComponent {

  protected value = signal('');

  protected onChange(event: Event) {
    this.value.set((event.currentTarget as HTMLInputElement).value);
  }

  protected onFocus() {
    this.value.set(unFormatValue(this.value()));
  }

  protected onBlur() {
    this.value.set(formatValue(this.value()));
  }
}
`,
  },
  {
    language: 'angular-ts',
    filename: 'trailing-select-amount.util.ts',
    code: `
export function formatValue(value: string): string {
  // Remove all commas and convert to number
  const numericValue = parseFloat(value.replace(/,/g, ''));

  if (isNaN(numericValue)) {
    return '';
  }

  // Format to have 2 decimal places and add commas for thousands
  const formattedValue = numericValue.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });

  return formattedValue;
}

export function unFormatValue(string: string): string {
  return string.replace(/,/g, '');
}
`,
  },
];
